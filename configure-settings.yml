name: Configure Hugo Settings

on:
  workflow_run:
    workflows: ["Add Front Matter"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: read

jobs:
  configure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Retrieve custom domain
        id: fetch-domain
        run: |2
          customDomain=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pages \
            | jq -r '.cname // ""')
          echo "CUSTOM_DOMAIN=$customDomain" >> $GITHUB_ENV

      - name: Create Hugo config
        id: configure
        env:
          HUGO_CONFIG: |
            baseURL = "https://__DOMAIN__"
            languageCode = "zh-cn"
            title = "__OWNER__'s Space"
            theme = "PaperMod"

            [params]
            mainSections = ["post"]
            defaultTheme = "auto"
            ShowReadingTime = true
            ShowShareButtons = false
            ShowPostNavLinks = true
            ShowBreadCrumbs = true
            ShowCodeCopyButtons = true
            ShowToc = true

            [params.homeInfoParams]
            Title = "欢迎来到 __OWNER__ 的文档站"
            Content = "在喧嚣时代中静心思考，用文字传递理性与希望。"

            [[params.socialIcons]]
            name = "github"
            url = "https://github.com/__OWNER__"

            [outputs]
            home = ["HTML", "RSS", "JSON"]

            [taxonomies]
            category = "categories"
            tag = "tags"

            [menu]
            main = [
            {identifier = "archives", name = "Archives", url = "/archives/", weight = 10},
            {identifier = "categories", name = "Categories", url = "/categories/", weight = 20},
            {identifier = "search", name = "Search", url = "/search/", weight = 30},
            {identifier = "tags", name = "Tags", url = "/tags/", weight = 40}
            ]
        run: |2
          # 设置域名
          if [ -n "$CUSTOM_DOMAIN" ]; then
            domain="$CUSTOM_DOMAIN"
          else
            owner="${GITHUB_REPOSITORY_OWNER}"
            repo="$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
            domain="$owner.github.io/$repo"
          fi

          # 检查并创建配置文件
          if [ ! -f ".github/hugo.toml" ]; then
            echo "创建 hugo.toml 配置文件"
            mkdir -p .github
            echo "$HUGO_CONFIG" > .github/hugo.toml
            
            # 替换变量
            sed -i "s|__DOMAIN__|$domain|g" .github/hugo.toml
            sed -i "s|__OWNER__|${GITHUB_REPOSITORY_OWNER}|g" .github/hugo.toml
            
            echo "已创建 hugo.toml 配置文件"
          else
            echo "hugo.toml 配置文件已存在，跳过创建"
          fi

      - name: Commit changes
        if: success()
        run: |2
          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 同步远程更改
          git fetch origin main
          git switch main
          git pull --rebase origin main
          
          # 添加更改
          git add -A
          
          # 检查是否有更改需要提交
          if ! git diff --quiet --staged; then
            # 提交更改
            git commit -m "chore: configure hugo settings"
            
            # 尝试推送更改，如果失败则重试
            for i in {1..3}; do
              if git push origin main; then
                echo "成功推送更改到仓库"
                break
              else
                echo "推送失败，尝试重新同步 (尝试 $i/3)"
                git fetch origin main
                git pull --rebase origin main
                if [ $i -eq 3 ]; then
                  echo "推送失败，已达到最大重试次数"
                  exit 1
                fi
              fi
            done
          else
            echo "没有需要提交的更改"
          fi
